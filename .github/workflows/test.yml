name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:unit
      
      - name: Run performance tests
        run: npm run test:performance
      
      - name: Run all tests with coverage
        run: npm run test:coverage
        continue-on-error: true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Firebase CLI
        run: npm install -g firebase-tools@latest
      
      - name: Create Firebase project config
        run: |
          echo '{
            "projects": {
              "default": "budget-buckets-test"
            }
          }' > .firebaserc
      
      - name: Start Firebase Emulators
        run: |
          firebase emulators:start --only firestore,auth --project=budget-buckets-test &
          sleep 10
          echo "Emulators started"
      
      - name: Run integration tests
        run: npm run test:integration
        continue-on-error: true
      
      - name: Stop Firebase Emulators
        run: |
          pkill -f firebase || true
          echo "Emulators stopped"

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Run E2E tests
        run: npm run test:e2e
      
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm audit --audit-level moderate
      
      - name: Run dependency check
        run: |
          # Check for outdated dependencies
          npm outdated || true
          echo "Dependency check completed"

  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Validate package.json
        run: npm run test --dry-run
      
      - name: Check for syntax errors
        run: |
          # Basic syntax check for main server files
          node -c server.js
          node -c server-dev.js
          echo "Syntax validation passed"
      
      - name: Validate static files
        run: |
          # Check that critical static files exist
          test -f app/index.html || exit 1
          test -f auth/login.html || exit 1
          test -f home.html || exit 1
          test -f test/smoke-test.html || exit 1
          echo "Static file validation passed"

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-audit, build-validation]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Build Validation: ${{ needs.build-validation.result }}"
          
          # Fail if critical tests failed
          if [[ "${{ needs.unit-tests.result }}" == "failure" ]]; then
            echo "❌ Unit tests failed - blocking deployment"
            exit 1
          fi
          
          if [[ "${{ needs.security-audit.result }}" == "failure" ]]; then
            echo "❌ Security audit failed - blocking deployment"
            exit 1
          fi
          
          if [[ "${{ needs.build-validation.result }}" == "failure" ]]; then
            echo "❌ Build validation failed - blocking deployment"
            exit 1
          fi
          
          echo "✅ All quality gates passed"