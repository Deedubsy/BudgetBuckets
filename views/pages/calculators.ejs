<%
const layoutData = {
  title: 'Free Budget & Savings Calculators — Budget Buckets',  
  description: 'Free Budget Calculator and Savings Rate & Time-to-Goal Calculator with compounding. Weekly, fortnightly & monthly pay cycles. Multi-currency support.',
  active: 'calculators',
  pageCss: 'calculators.css',
  body: `
    <div class="container">
      <section class="card section" style="margin-top:16px">
        <span class="pill">Free financial tools</span>
        <h1>Budget & Savings Calculators</h1>
        <p class="muted">Fast, no-fuss calculators that speak weekly & fortnightly. Multi-currency support. Your inputs stay in your browser (no signup).</p>
        <div class="tabs" role="tablist" aria-label="Calculator selector">
          <button id="tab-budget" class="tab" role="tab" aria-selected="true" aria-controls="panel-budget">Budget Calculator</button>
          <button id="tab-savings" class="tab" role="tab" aria-selected="false" aria-controls="panel-savings">Savings Calculator</button>
        </div>
      </section>

      <!-- Fortnightly Budget Calculator -->
      <section id="panel-budget" class="card section" role="tabpanel" aria-labelledby="tab-budget">
        <a id="budget-calculator"></a>
        <h2>Budget Calculator</h2>
        <p class="muted">Enter your income and expenses using your preferred frequency. All values automatically convert across weekly, fortnightly, monthly, and yearly.</p>

        <div class="grid-2" style="margin-top:8px">
          <div>
            <div class="row" style="gap:14px;flex-wrap:wrap">
              <label for="bc-income">Income</label>
              <input id="bc-income" type="number" min="0" step="0.01" placeholder="0.00" />
              <label for="bc-freq" class="sr-only">Frequency</label>
              <select id="bc-freq" aria-label="Income frequency">
                <option value="weekly">Weekly</option>
                <option value="fortnightly" selected>Fortnightly</option>
                <option value="monthly">Monthly</option>
                <option value="yearly">Yearly</option>
              </select>
              <label for="bc-curr">Currency</label>
              <select id="bc-curr">
                <option value="AUD" selected>AUD</option>
                <option value="NZD">NZD</option>
                <option value="USD">USD</option>
                <option value="GBP">GBP</option>
              </select>
              <button id="bc-clear" title="Clear all">Clear All</button>
            </div>

            <h3 style="margin:16px 0 8px">Expenses</h3>
            <div class="help">Enter amounts in <strong id="bc-freq-label">fortnightly</strong> values</div>
            <table id="bc-table" aria-label="Expense items">
              <thead>
                <tr><th>Item</th><th class="right">Amount (<span id="bc-freq-label-2">Fortnightly</span>)</th><th class="right"> </th></tr>
              </thead>
              <tbody>
                <!-- rows injected here -->
              </tbody>
            </table>
            <div class="row" style="margin-top:10px;gap:8px">
              <button id="bc-add" class="primary">+ Add Expense</button>
              <button id="bc-preset" title="Load preset expenses">Load Preset</button>
            </div>
          </div>

          <div>
            <div class="grid-2">
              <div class="kpi"><div class="muted">Income / Weekly</div><div id="bc-inc-w" class="big">—</div></div>
              <div class="kpi"><div class="muted">Expenses / Weekly</div><div id="bc-exp-w" class="big">—</div></div>
              <div class="kpi"><div class="muted">Income / Fortnightly</div><div id="bc-inc-f" class="big">—</div></div>
              <div class="kpi"><div class="muted">Expenses / Fortnightly</div><div id="bc-exp-f" class="big">—</div></div>
              <div class="kpi"><div class="muted">Income / Monthly</div><div id="bc-inc-m" class="big">—</div></div>
              <div class="kpi"><div class="muted">Expenses / Monthly</div><div id="bc-exp-m" class="big">—</div></div>
              <div class="kpi"><div class="muted">Income / Yearly</div><div id="bc-inc-y" class="big">—</div></div>
              <div class="kpi"><div class="muted">Expenses / Yearly</div><div id="bc-exp-y" class="big">—</div></div>
            </div>
            <div class="kpi" style="margin-top:12px">
              <div class="muted">Leftover / Deficit (<span id="bc-leftover-freq">Monthly</span>)</div>
              <div id="bc-leftover" class="big">—</div>
              <div id="bc-leftover-note" class="help"></div>
              <div id="bc-leftover-pct" class="help" style="margin-top:4px"></div>
            </div>
          </div>
        </div>
      </section>

      <!-- Savings Rate & Time-to-Goal -->
      <section id="panel-savings" class="card section" role="tabpanel" aria-labelledby="tab-savings" hidden>
        <a id="savings-calculator"></a>
        <h2>Savings Rate & Time‑to‑Goal</h2>
        <p class="muted">Calculate how long it takes to reach your savings target with compounding returns. Enter your income to see your savings rate percentage.</p>

        <div class="grid-2" style="margin-top:8px">
          <div>
            <h3 style="margin:0 0 12px;font-size:18px">Income & Settings</h3>
            <div class="row" style="gap:14px;flex-wrap:wrap;margin-bottom:16px">
              <label for="sc-income">Income</label>
              <input id="sc-income" type="number" min="0" step="0.01" placeholder="0.00" />
              <select id="sc-incfreq">
                <option value="weekly">Weekly</option>
                <option value="fortnightly" selected>Fortnightly</option>
                <option value="monthly">Monthly</option>
                <option value="yearly">Yearly</option>
              </select>
              <label for="sc-curr">Currency</label>
              <select id="sc-curr">
                <option value="AUD" selected>AUD</option>
                <option value="NZD">NZD</option>
                <option value="USD">USD</option>
                <option value="GBP">GBP</option>
              </select>
            </div>

            <h3 style="margin:16px 0 12px;font-size:18px">Savings Plan</h3>
            <div class="row" style="gap:14px;flex-wrap:wrap;margin-bottom:8px">
              <label for="sc-balance">Current Balance</label>
              <input id="sc-balance" type="number" min="0" step="0.01" placeholder="0.00" />
              <label for="sc-target">Target Amount</label>
              <input id="sc-target" type="number" min="0" step="0.01" placeholder="10000.00" />
            </div>
            <div class="row" style="gap:14px;flex-wrap:wrap;margin-bottom:8px">
              <label for="sc-contrib">Contribution</label>
              <input id="sc-contrib" type="number" min="0" step="0.01" placeholder="200.00" />
              <select id="sc-freq">
                <option value="weekly">Weekly</option>
                <option value="fortnightly" selected>Fortnightly</option>
                <option value="monthly">Monthly</option>
                <option value="yearly">Yearly</option>
              </select>
            </div>
            <div class="row" style="gap:14px;flex-wrap:wrap">
              <label for="sc-rate">Annual Return (%)</label>
              <input id="sc-rate" type="number" min="0" step="0.01" placeholder="5.0" value="0" />
            </div>
            <div class="row" style="margin-top:10px;gap:8px">
              <button id="sc-calc" class="primary">Calculate</button>
              <button id="sc-clear" title="Clear all">Clear</button>
            </div>
          </div>

          <div>
            <div class="kpi"><div class="muted">Monthly Contribution</div><div id="sc-cm" class="big">—</div></div>
            <div class="kpi" style="margin-top:12px"><div class="muted">Time to Target</div><div id="sc-months" class="big">—</div><div class="help">months</div></div>
            <div class="kpi" style="margin-top:12px"><div class="muted">Target Date</div><div id="sc-date" class="help">—</div></div>
            <div class="kpi" style="margin-top:12px"><div class="muted">Savings Rate</div><div id="sc-ratepct" class="big">—</div></div>
            <div id="sc-note" class="help" style="margin-top:8px"></div>
          </div>
        </div>
      </section>
    </div>

    <!-- Full Calculator JavaScript -->
    <script>
      const $ = s => document.querySelector(s);
      const $$ = s => [...document.querySelectorAll(s)];
      
      // Tab switching
      $$('.tab').forEach(tab => {
        tab.addEventListener('click', function() {
          $$('.tab').forEach(t => t.setAttribute('aria-selected', 'false'));
          $$('[role="tabpanel"]').forEach(p => p.hidden = true);
          this.setAttribute('aria-selected', 'true');
          $(this.getAttribute('aria-controls')).hidden = false;
        });
      });

      // ---------- Budget Calculator ----------
      let state = JSON.parse(localStorage.getItem('budgetCalcState') || '{}');
      state = Object.assign({ freq: 'fortnightly', income: 0, curr: 'AUD', items: [] }, state);
      
      const bc = {
        income: $('#bc-income'), freq: $('#bc-freq'), curr: $('#bc-curr'), add: $('#bc-add'), clear: $('#bc-clear'),
        table: $('#bc-table tbody'), freqLabel: $('#bc-freq-label'), freqLabel2: $('#bc-freq-label-2'),
        leftoverFreq: $('#bc-leftover-freq'),
        out: {
          incW: $('#bc-inc-w'), incF: $('#bc-inc-f'), incM: $('#bc-inc-m'), incY: $('#bc-inc-y'),
          expW: $('#bc-exp-w'), expF: $('#bc-exp-f'), expM: $('#bc-exp-m'), expY: $('#bc-exp-y'),
          leftover: $('#bc-leftover'), note: $('#bc-leftover-note')
        }
      };

      // Initialize state from localStorage
      bc.income.value = state.income || 0;
      bc.freq.value = state.freq || 'fortnightly';
      bc.curr.value = state.curr || 'AUD';

      const FREQ = {
        weekly: { perMonth: 52/12 },
        fortnightly: { perMonth: 26/12 },
        monthly: { perMonth: 1 },
        yearly: { perMonth: 1/12 }
      };

      function saveState(s) {
        localStorage.setItem('budgetCalcState', JSON.stringify(s));
      }

      function fmt(v, c) {
        const locale = c === 'AUD' ? 'en-AU' : c === 'USD' ? 'en-US' : c === 'GBP' ? 'en-GB' : c === 'NZD' ? 'en-NZ' : 'en-AU';
        return new Intl.NumberFormat(locale, { style: 'currency', currency: c }).format(isFinite(v) ? v : 0);
      }

      function addRow(data = {}) {
        const tr = document.createElement('tr');
        tr.innerHTML = \`
          <td><input type="text" placeholder="e.g. Groceries" value="\${data.name || ''}" style="width:100%;border:none;background:transparent;color:inherit" /></td>
          <td class="right"><input type="number" min="0" step="0.01" placeholder="0.00" value="\${data.amount || ''}" style="width:80px;border:none;background:transparent;color:inherit;text-align:right" /></td>
          <td class="right"><button onclick="this.closest('tr').remove();syncFromUI();render()" style="background:transparent;border:1px solid var(--border);color:var(--text);padding:2px 6px;border-radius:4px;cursor:pointer">×</button></td>
        \`;
        bc.table.appendChild(tr);
        tr.querySelector('input[type="text"]').addEventListener('input', () => { syncFromUI(); render(); });
        tr.querySelector('input[type="number"]').addEventListener('input', () => { syncFromUI(); render(); });
      }

      function syncFromUI() {
        const items = $$('tr', bc.table).map(tr => {
          const [nameEl, amtEl] = tr.querySelectorAll('input');
          const amount = parseFloat(amtEl.value || '0');
          return { name: nameEl.value.trim(), amount: isFinite(amount) && amount > 0 ? amount : 0 };
        });
        state = { income: parseFloat(bc.income.value || '0'), freq: bc.freq.value, curr: bc.curr.value, items };
        saveState(state);
      }

      function convertAll(baseVal, baseFreq) {
        const f = FREQ[baseFreq];
        const monthly = baseVal * f.perMonth;
        const weekly = monthly * (12/52);
        const fortnightly = monthly * (12/26);
        const yearly = monthly * 12;
        return { weekly, fortnightly, monthly, yearly };
      }

      function calcTotals() {
        const inc = parseFloat(bc.income.value || '0') || 0;
        const expBase = state.items.reduce((s, i) => s + (i.amount || 0), 0);
        const income = convertAll(inc, state.freq);
        const expenses = convertAll(expBase, state.freq);
        return { income, expenses };
      }

      function render() {
        bc.freqLabel.textContent = bc.freq.value;
        bc.freqLabel2.textContent = bc.freq.value.charAt(0).toUpperCase() + bc.freq.value.slice(1);
        const { income, expenses } = calcTotals();
        const curr = bc.curr.value;
        bc.out.incW.textContent = fmt(income.weekly, curr);
        bc.out.incF.textContent = fmt(income.fortnightly, curr);
        bc.out.incM.textContent = fmt(income.monthly, curr);
        bc.out.incY.textContent = fmt(income.yearly, curr);
        bc.out.expW.textContent = fmt(expenses.weekly, curr);
        bc.out.expF.textContent = fmt(expenses.fortnightly, curr);
        bc.out.expM.textContent = fmt(expenses.monthly, curr);
        bc.out.expY.textContent = fmt(expenses.yearly, curr);
        
        const leftover = income.monthly - expenses.monthly;
        const freqKey = state.freq;
        const leftoverByFreq = income[freqKey] - expenses[freqKey];
        bc.leftoverFreq.textContent = freqKey.charAt(0).toUpperCase() + freqKey.slice(1);
        bc.out.leftover.textContent = fmt(leftoverByFreq, curr);
        bc.out.leftover.style.color = leftoverByFreq < 0 ? '#ff6b6b' : '#5eead4';
        bc.out.note.textContent = leftoverByFreq < 0 ? 'Budget deficit' : 'Budget surplus';
        
        const savingsRate = income.monthly > 0 ? (leftover / income.monthly * 100) : 0;
        if (!$('#bc-leftover-pct')) {
          const pctDiv = document.createElement('div');
          pctDiv.id = 'bc-leftover-pct';
          pctDiv.className = 'help';
          pctDiv.style.marginTop = '4px';
          bc.out.note.parentNode.appendChild(pctDiv);
        }
        $('#bc-leftover-pct').textContent = income.monthly > 0 ? \`Savings rate: \${savingsRate.toFixed(1)}%\` : '';
      }

      // Preset templates
      const presets = {
        student: [
          { name: 'Rent/Accommodation', amount: 800 },
          { name: 'Groceries', amount: 150 },
          { name: 'Transport', amount: 50 },
          { name: 'Phone/Internet', amount: 40 },
          { name: 'Entertainment', amount: 50 }
        ],
        family: [
          { name: 'Mortgage/Rent', amount: 1800 },
          { name: 'Groceries', amount: 400 },
          { name: 'Utilities', amount: 150 },
          { name: 'Insurance', amount: 200 },
          { name: 'Transport', amount: 150 },
          { name: 'Childcare', amount: 500 }
        ],
        single: [
          { name: 'Rent', amount: 1200 },
          { name: 'Groceries', amount: 200 },
          { name: 'Utilities', amount: 80 },
          { name: 'Transport', amount: 100 },
          { name: 'Phone/Internet', amount: 60 },
          { name: 'Entertainment', amount: 150 }
        ]
      };

      // Initialize rows
      if (!state.items?.length) {
        addRow({ name: 'Rent', amount: 0 });
        addRow({ name: 'Groceries', amount: 0 });
      } else {
        state.items.forEach(addRow);
      }

      // Events
      bc.add.addEventListener('click', () => { addRow(); });
      bc.clear.addEventListener('click', () => {
        state = { freq: 'fortnightly', income: 0, curr: bc.curr.value, items: [] };
        bc.income.value = 0;
        bc.freq.value = 'fortnightly';
        bc.table.innerHTML = '';
        addRow();
        addRow();
        syncFromUI();
        render();
      });
      bc.income.addEventListener('input', () => { syncFromUI(); render(); });
      bc.freq.addEventListener('change', () => { syncFromUI(); render(); });
      bc.curr.addEventListener('change', () => { syncFromUI(); render(); });
      
      $('#bc-preset').addEventListener('click', () => {
        const choice = prompt('Choose a preset:\\n1. Student\\n2. Family\\n3. Single Professional\\n\\nEnter 1, 2, or 3:');
        const presetMap = { '1': 'student', '2': 'family', '3': 'single' };
        const preset = presets[presetMap[choice]];
        if (preset) {
          bc.table.innerHTML = '';
          preset.forEach(item => addRow(item));
          syncFromUI();
          render();
        }
      });

      syncFromUI();
      render();

      // ---------- Savings Calculator ----------
      const sc = {
        balance: $('#sc-balance'), contrib: $('#sc-contrib'), freq: $('#sc-freq'), rate: $('#sc-rate'), target: $('#sc-target'),
        curr: $('#sc-curr'), income: $('#sc-income'), incfreq: $('#sc-incfreq'), calc: $('#sc-calc'), clear: $('#sc-clear'),
        out: { cm: $('#sc-cm'), months: $('#sc-months'), date: $('#sc-date'), ratepct: $('#sc-ratepct'), note: $('#sc-note') }
      };

      function toMonthly(amount, freq) {
        if (!isFinite(amount) || amount <= 0) return 0;
        switch (freq) {
          case 'weekly': return amount * 52/12;
          case 'fortnightly': return amount * 26/12;
          case 'monthly': return amount;
          case 'yearly': return amount / 12;
        }
        return amount;
      }

      function monthsToGoal(P0, cMonthly, annualRate, target) {
        const r = Math.pow(1 + (annualRate/100), 1/12) - 1;
        if (!isFinite(P0)) P0 = 0;
        if (!isFinite(cMonthly)) cMonthly = 0;
        if (!isFinite(target)) target = 0;
        if (target <= P0) return 0;
        if (r <= 0) {
          if (cMonthly <= 0) return Infinity;
          return Math.ceil((target - P0) / cMonthly);
        }
        const numerator = cMonthly + r*P0;
        const denom = cMonthly + r*P0 - r*target;
        if (denom <= 0) return Infinity;
        const n = Math.log(numerator/denom) / Math.log(1+r);
        return Math.ceil(Math.max(0, n));
      }

      const fmtMoney = (v, c) => {
        const locale = c === 'AUD' ? 'en-AU' : c === 'USD' ? 'en-US' : c === 'GBP' ? 'en-GB' : c === 'NZD' ? 'en-NZ' : 'en-AU';
        return new Intl.NumberFormat(locale, { style: 'currency', currency: c }).format(isFinite(v) ? v : 0);
      };
      const fmtPct = v => isFinite(v) ? (v.toFixed(1) + '%') : '—';

      function runSavings() {
        const P0 = parseFloat(sc.balance.value || '0') || 0;
        const contrib = parseFloat(sc.contrib.value || '0') || 0;
        const cMonthly = toMonthly(contrib, sc.freq.value);
        const rate = parseFloat(sc.rate.value || '0') || 0;
        const target = parseFloat(sc.target.value || '0') || 0;
        const months = monthsToGoal(P0, cMonthly, rate, target);
        
        sc.out.cm.textContent = fmtMoney(cMonthly, sc.curr.value);
        sc.out.months.textContent = months === Infinity ? '—' : String(months);
        
        if (months === Infinity) {
          sc.out.date.textContent = 'Unreachable with current inputs';
          sc.out.note.innerHTML = 'Increase contribution or reduce target. If annual return is 0%, we use linear maths.';
        } else {
          const d = new Date();
          d.setMonth(d.getMonth() + months);
          sc.out.date.textContent = d.toLocaleDateString('en-AU', { year: 'numeric', month: 'long' });
        }
        
        // Savings rate (optional)
        const inc = parseFloat(sc.income.value || '0') || 0;
        const incMonthly = inc > 0 ? toMonthly(inc, sc.incfreq.value) : 0;
        const ratePct = incMonthly > 0 ? (cMonthly / incMonthly * 100) : NaN;
        sc.out.ratepct.textContent = isFinite(ratePct) ? fmtPct(ratePct) : '—';
      }

      // Auto-calculate on input changes
      [sc.balance, sc.contrib, sc.target, sc.rate, sc.income].forEach(input => {
        input.addEventListener('input', runSavings);
      });
      [sc.freq, sc.curr, sc.incfreq].forEach(select => {
        select.addEventListener('change', runSavings);
      });
      
      sc.calc.addEventListener('click', runSavings);
      sc.clear.addEventListener('click', () => {
        sc.balance.value = '';
        sc.contrib.value = '';
        sc.rate.value = '0';
        sc.target.value = '';
        sc.income.value = '';
        sc.freq.value = 'fortnightly';
        sc.incfreq.value = 'fortnightly';
        sc.curr.value = 'AUD';
        runSavings();
      });
      
      // Initial calculation
      runSavings();
    </script>
  `
};
%>

<%- include('../layout', layoutData) %>